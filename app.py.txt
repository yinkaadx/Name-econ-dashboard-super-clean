import streamlit as st
import os
from dotenv import load_dotenv
load_dotenv()  # keys safe locked
import pandas as pd
import numpy as np
from fredapi import Fred
fred = Fred(api_key=os.getenv('FRED_API_KEY')) if os.getenv('FRED_API_KEY') else None
import pandas_datareader as pdr
import wbdata
import requests
from bs4 import BeautifulSoup
import yfinance as yf
import sqlite3
from concurrent.futures import ThreadPoolExecutor
import plotly.express as px
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
import time

# Indicators list with fetch functions
indicators = {
    # Risks proxies
    'Volatility Risk': {'func': lambda: yf.Ticker('^VIX').info.get('regularMarketPrice', 'Error'), 'thresh': 20, 'desc': 'swings fog crash heart race scare'},
    'Credit Risk': {'func': lambda: scrape_moodys_defaults(), 'thresh': 5, 'desc': 'defaults drought crop loans fail'},
    'Interest Rate Risk': {'func': lambda: fred.get_series('FEDFUNDS')[-1] if fred else scrape_fed_rates(), 'thresh': 5, 'desc': 'rises hurt bonds brakes slow car'},
    'TED Spread': {'func': lambda: fred.get_series('TEDRATE')[-1] if fred else np.nan, 'thresh': 0.5, 'desc': 'liquidity jam'},
    'CPI Inflation': {'func': lambda: fred.get_series('CPIAUCSL')[-1] if fred else np.nan, 'thresh': 3, 'desc': 'fire burn cash'},

    # Short-term debt leading/coincident
    'Yield Curve': {'func': lambda: fred.get_series('T10Y2Y')[-1] if fred else np.nan, 'thresh': 0, 'desc': 'river spread bank profit growth'},
    'GDP': {'func': lambda: fred.get_series('GDP')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'harvest output jobs'},
    'Capacity Utilization': {'func': lambda: fred.get_series('CAPUTLB50001S')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'factory hum no smoke'},
    'PCE Inflation': {'func': lambda: fred.get_series('PCEPI')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'heat balloon'},
    'Payrolls': {'func': lambda: fred.get_series('PAYEMS')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'job adds team build'},
    'Unemployment': {'func': lambda: fred.get_series('UNRATE')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'idle rust'},
    'P/E Ratio': {'func': lambda: scrape_multpl_pe(), 'thresh': 25, 'desc': 'overprice house'},
    'Fed Funds Rate': {'func': lambda: fred.get_series('FEDFUNDS')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'borrow speed limit'},
    'Industrial Production': {'func': lambda: fred.get_series('INDPRO')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'factory make'},

    # Long-term debt leading/coincident
    'Productivity': {'func': lambda: pdr.get_data_fred('OPHNFB')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'output/input tools boost'},
    'Debt/GDP': {'func': lambda: (fred.get_series('GFDEBTN')[-1] / fred.get_series('GDP')[-1]) * 100 if fred else np.nan, 'thresh': np.nan, 'desc': 'borrow max cards burden'},
    'M2 Money Supply': {'func': lambda: fred.get_series('M2SL')[-1] if fred else np.nan, 'thresh': np.nan, 'desc': 'printing rain money'},
    'Asset Returns S&P': {'func': lambda: yf.Ticker('^GSPC').history(period='1d')['Close'][0], 'thresh': np.nan, 'desc': 'gains steady heal'},

    # Geo cycles
    'GDP per Capita': {'func': lambda: wbdata.get_series('NY.GDP.PCAP.CD')['USA'], 'thresh': np.nan, 'desc': 'income head living rise'},  # Example for USA
    'Military Spend': {'func': lambda: scrape_sipri_military(), 'thresh': np.nan, 'desc': 'arms costly drain'},
    'Corruption Index': {'func': lambda: scrape_transparency_cpi(), 'thresh': np.nan, 'desc': 'graft erode buy rot'},
    'Power Index': {'func': lambda: get_globalfirepower_index(), 'thresh': np.nan, 'desc': 'composite strength peak/drop'},
}

# Define scrape functions
def scrape_moodys_defaults():
    try:
        r = requests.get('https://www.moodys.com/researchandratings/ratings-news/003002?type=Rating+Action')
        soup = BeautifulSoup(r.text, 'html.parser')
        return float(soup.select_one('.default-rate').text.strip('%')) or 2.0
    except:
        return np.nan

def scrape_fed_rates():
    try:
        r = requests.get('https://www.federalreserve.gov/monetarypolicy/openmarket.htm')
        soup = BeautifulSoup(r.text, 'html.parser')
        return float(soup.select_one('#current-rate').text)
    except:
        return np.nan

def scrape_multpl_pe():
    try:
        r = requests.get('https://www.multpl.com/s-p-500-pe-ratio')
        soup = BeautifulSoup(r.text, 'html.parser')
        return float(soup.select_one('#current').text)
    except:
        return np.nan

def scrape_sipri_military():
    try:
        df = pd.read_excel('https://sipri.org/sites/default/files/SIPRI-Milex-data-1949-2023.xlsx', sheet_name='Share of GDP', skiprows=5)
        return df.iloc[-1]['USA']  # Example for USA
    except:
        return np.nan

def scrape_transparency_cpi():
    try:
        df = pd.read_csv('https://images.transparencycdn.org/images/CPI2023_DataSet.xlsx - CPI2023.csv')
        return df[df['Country'] == 'United States']['CPI Score'].values[0]
    except:
        return np.nan

def get_globalfirepower_index():
    try:
        from globalfirepower_scraper import GlobalFirePowerScraper
        gfi = GlobalFirePowerScraper()
        data = gfi.get_armies_information()
        return data[0]['power_index']  # Top rank
    except ImportError:
        return np.nan

def fetch_all():
    data = {}
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = {name: executor.submit(ind['func']) for name, ind in indicators.items()}
        for name, future in futures.items():
            try:
                data[name] = future.result()
            except Exception as e:
                data[name] = f'Error: {str(e)}'
    return data

conn = sqlite3.connect('econ.db')  # pond store
st.title('Econ Mirror Dashboard - July 15 2025')
if st.button('Refresh Now'):  # pulse
    data = fetch_all()
    df = pd.DataFrame(list(data.items()), columns=['Indicator', 'Value'])
    df.to_sql('data', conn, if_exists='replace')
else:
    df = pd.read_sql('SELECT * FROM data', conn)

col1, col2 = st.columns(2)  # mobile responsive
with col1:
    st.subheader('Risks/Cycles Viz')
    for _, row in df.iterrows():
        thresh = indicators.get(row['Indicator'], {}).get('thresh', np.nan)
        value = row['Value'] if isinstance(row['Value'], (int, float)) else np.nan
        color = 'red' if not np.isnan(thresh) and value > thresh else 'green'
        fig = px.bar(x=[row['Indicator']], y=[value], color_discrete_sequence=[color], title=indicators.get(row['Indicator'], {}).get('desc', ''))
        st.plotly_chart(fig, use_container_width=True)  # paintings alerts

with col2:
    st.dataframe(df)  # tables

# Alerts yell flood
breaches = df[df.apply(lambda row: isinstance(row['Value'], (int, float)) and row['Value'] > indicators.get(row['Indicator'], {}).get('thresh', np.nan), axis=1)]
if not breaches.empty:
    msg = MIMEText(f'Flood: {breaches.to_string()}')
    msg['Subject'] = 'Econ Breach Alert'
    msg['From'] = os.getenv('EMAIL_USER')
    msg['To'] = os.getenv('EMAIL_TO')
    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()
        server.login(os.getenv('EMAIL_USER'), os.getenv('EMAIL_PASS'))
        server.send_message(msg)
    st.warning('Alert emailed!')

# Cron auto: deploy Heroku scheduler addon hourly python app.py refresh; free tier
# URL: heroku create my-econ-mirror; git push heroku main; https://my-econ-mirror.herokuapp.com